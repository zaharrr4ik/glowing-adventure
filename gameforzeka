# Импорт необходимых библиотек Pygame и других модулей Python.
import pygame
import random
import os
import sys

# Инициализация Pygame:
# pygame.init() инициализирует все модули Pygame, необходимые для работы с графикой, звуком и вводом.
# pygame.mixer.init() инициализирует модуль mixer, ответственный за воспроизведение звука.
pygame.init()
pygame.mixer.init()

# Определение констант:
# FPS: количество кадров в секунду (скорость обновления экрана).
FPS = 60
# Цветовые константы в формате RGB (Red, Green, Blue):
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
GRAY = (50, 50, 50)
YELLOW = (255, 255, 0)
RED = (255, 0, 0)
# Пути к директориям с данными (изображения) и звуками:
data_dir = os.path.join(os.path.dirname(__file__), "data")  # Динамически определяем путь к папке "data"
sounds_dir = os.path.join(os.path.dirname(__file__), "sounds")  # Динамически определяем путь к папке "sounds"
# Имя шрифта, используемого для отображения текста:
GAME_FONT = "comicsansms"  # Можно изменить на другой системный шрифт


# Класс Character:
# Представляет персонажа в игре. Хранит имя, пути к изображениям (обычное и выделенное), и скорость.
class Character:
    def __init__(self, name, image_name, bright_image_name, speed):
        # name: Имя персонажа (строка).
        self.name = name
        # image_name: Имя файла с изображением персонажа (строка).
        self.image_name = image_name
        # bright_image_name: Имя файла с подсвеченным изображением персонажа (строка).
        self.bright_image_name = bright_image_name
        # speed: Скорость передвижения персонажа (число).
        self.speed = speed
        # image: Поверхность Pygame с изображением персонажа. Инициализируется в load_images().
        self.image = None
        # bright_image: Поверхность Pygame с подсвеченным изображением персонажа. Инициализируется в load_images().
        self.bright_image = None
        # rect: Прямоугольник, представляющий область, занимаемую изображением персонажа. Инициализируется в
        # load_images().
        self.rect = None
        # highlighted: Флаг, указывающий, выделен ли персонаж.
        self.highlighted = False


# Создание списка персонажей:
# Список объектов класса Character, представляющих доступных для выбора персонажей.
characters = [
    Character("Немецкий медик", "german_medic.png", "german_medic_bright.png", 5),
    Character("Военный Нигерии", "nigerian_soldier.png", "nigerian_soldier_bright.png", 2),
    Character("Русский военный", "russian_soldier.png", "russian_soldier_bright.png", 3),
]



# Функция для отрисовки текста на экране с эффектом размытия (для улучшения визуального восприятия):
def draw_pixel_text(surface, text, font_size, x, y, color, font=GAME_FONT):
    # Создаем объект шрифта с указанным именем и размером.
    font = pygame.font.SysFont(font, font_size)
    # Рендерим текст, создавая поверхность с текстом.
    text_surface = font.render(text, True, color)
    # Получаем прямоугольник, охватывающий текст.
    text_rect = text_surface.get_rect(center=(x, y))
    # Масштабируем поверхность дважды (для размытия) и уменьшаем обратно до исходного размера.
    blurred_surface = pygame.transform.scale(text_surface,
                                             (text_surface.get_width() * 2, text_surface.get_height() * 2))
    blurred_surface = pygame.transform.scale(blurred_surface, text_surface.get_size())
    # Отображаем размытый текст на указанной поверхности.
    surface.blit(blurred_surface, text_rect)


# Функция для создания и обработки текстового поля ввода:
def input_box(screen, message, width, height, stars):
    # Создаем объект шрифта размером 36.
    font = pygame.font.Font(None, 36)
    # Создаем прямоугольник для поля ввода.
    input_rect = pygame.Rect((width - 600) // 2, (height - 50) // 2, 600, 50)
    # Цвета для активного и неактивного состояния поля ввода.
    color_active = pygame.Color('lightskyblue3')
    color_passive = pygame.Color('chartreuse4')
    # Флаг, указывающий, активно ли поле ввода.
    active = False
    # Введенный текст.
    text = ''
    # Флаг, управляющий циклом ввода.
    running = True
    # Цикл обработки событий поля ввода:
    while running:
        # Обрабатываем события.
        for event in pygame.event.get():
            # Закрытие окна.
            if event.type == pygame.QUIT:
                pygame.quit()
                quit()
            # Нажатие мыши.
            if event.type == pygame.MOUSEBUTTONDOWN:
                # Если клик внутри прямоугольника, поле ввода становится активным.
                if input_rect.collidepoint(event.pos):
                    active = True
                else:
                    active = False
            # Нажатие клавиш.
            if event.type == pygame.KEYDOWN:
                # Только если поле ввода активно.
                if active:
                    # Enter: завершаем ввод.
                    if event.key == pygame.K_RETURN:
                        running = False
                    # Backspace: удаляем последний символ.
                    elif event.key == pygame.K_BACKSPACE:
                        text = text[:-1]
                    # Другие клавиши: добавляем символ к тексту.
                    else:
                        text += event.unicode

        # Отрисовка фона, звезд, сообщения и поля ввода.
        screen.fill(BLACK)
        for star in stars:
            pygame.draw.circle(screen, WHITE, (star[0], star[1]), star[2])
        draw_pixel_text(screen, message, 48, width // 2, input_rect.top - 50, WHITE, font=GAME_FONT)
        # Устанавливаем цвет поля ввода в зависимости от состояния.
        color = color_active if active else color_passive
        # Отрисовываем прямоугольник поля ввода.
        pygame.draw.rect(screen, color, input_rect, 2)
        # Рендерим и отображаем введенный текст.
        text_surface = font.render(text, True, color)
        screen.blit(text_surface, (input_rect.x + 5, input_rect.y + 5))
        # Обновляем экран.
        pygame.display.flip()
    # Возвращаем введенный текст.
    return text


# Класс MainScreen:
# Управляет основным экраном игры, включая меню и игровую сцену.
def scale_image(image, scale_factor):
    """Масштабирует изображение, учитывая возможность ошибки."""
    try:
        size = round(image.get_width() * scale_factor), round(image.get_height() * scale_factor)
        return pygame.transform.scale(image, size)
    except AttributeError:
        print("Ошибка масштабирования изображения: изображение не найдено.")
        return None


class MainScreen:
    def __init__(self, width, height):
        pygame.init()  # инициализация ПЕРЕД созданием экрана
        pygame.font.init()  # инициализация шрифтов
        self.screen = pygame.display.set_mode((width, height))  # создание экрана ПЕРЕД загрузкой ресурсов
        self.font = pygame.font.SysFont(None, 36)
        # Ширина и высота экрана
        self.width = width
        self.height = height
        # Создаем игровое окно
        self.screen = pygame.display.set_mode((self.width, self.height))
        self.width = width
        self.height = height
        self.screen = pygame.display.set_mode((self.width, self.height))

        self.character_images = []  # Инициализация списка персонажей

        self.load_images()  # Важно: вызов загрузки изображений здесь

        self.selected_character = None
        self.ammo = 10
        self.reloading = False
        self.keys_pressed = {}
        # Список звезд для фона
        self.stars = []
        self.generate_stars(200)  # Генерация звезд

        # Загрузка изображений
        self.load_images()

        # Имя игрока и выбранный персонаж
        self.player_name = ""
        self.selected_character = None

        # Объект шрифта для отображения текста
        self.font = pygame.font.SysFont(None, 64)

        # Список кнопок меню и звуковых эффектов
        self.buttons = []
        self.volume = 0.5
        self.dragging_slider = False

        # Загрузка звуков
        self.load_sounds()

        # Инициализация переменных для стрельбища
        self.test_x = self.width // 2
        self.test_y = self.height - 150
        self.flipped_image = False

        # Инициализация атрибутов для управления стрельбой
        self.keys_pressed = {pygame.K_a: False, pygame.K_d: False}  # Состояние клавиш
        self.target_x = self.width - 200  # Позиция мишени
        self.target_y = self.height - 200  # Позиция мишени
        self.patron_x = 0  # Координаты пули
        self.patron_y = 0  # Координаты пули
        self.reloading = False  # Флаг перезарядки
        self.ammo = 10  # Количество патронов

        # Инициализация атрибутов для звуков
        self.reload_sound = None  # Звук перезарядки
        self.walk_sound = None  # Звук шагов
        self.shot_sound = None  # Звук выстрела
        self.click_sound = None  # Звук нажатия кнопки

        # Инициализация атрибутов для курсора
        self.aim_cursor = None  # Курсор прицеливания
        self.aim_cursor_rect = None  # Прямоугольник курсора

        # Флаги управления меню
        self.menu_opened_from_shooting_range = False
        self.previous_test_x = 0
        self.previous_test_y = 0
        self.previous_flipped_image = False
        self.font = pygame.font.SysFont(None, 36)

    # Основная функция, запускающая игровой цикл:
    def run(self):
        self.show_story()  # Показываем вступительный ролик
        self.show_menu_screen()  # Отображаем главное меню

        running = True
        while running:
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    running = False
                elif event.type == pygame.KEYDOWN and event.key == pygame.K_SPACE and self.selected_character is None:
                    self.choose_character()
                elif self.selected_character: # проверяем, выбран ли персонаж
                    self.show_shooting_range() # Запускаем полигон, только если персонаж выбран


            if self.selected_character: # проверяем, выбран ли персонаж
                self.update()
                self.draw_shooting_screen()
                pygame.display.flip()

        pygame.quit()
        sys.exit()
    def create_cursor(self, cursor_image):
        """Creates a Pygame cursor from an image. Handles potential errors."""
        try:
            if cursor_image is None:
                print("Warning: Cursor image not loaded correctly.")
                return None, None

            cursor_rect = cursor_image.get_rect()
            return cursor_image, cursor_rect
        except AttributeError as e:
            print(f"Error getting cursor rect: {e}")
            return None, None
        except Exception as e:
            print(f"An unexpected error occurred in create_cursor: {e}")
            return None, None

    # Функция для отрисовки меню:
    def draw_menu_screen(self):
        self.screen.fill(BLACK)  # Очистка экрана
        for star in self.stars:
            pygame.draw.circle(self.screen, WHITE, (star[0], star[1]), star[2])

        title_font = pygame.font.SysFont(GAME_FONT, 150)
        title_text = title_font.render("Сквозь Миры", True, (192, 192, 192))
        title_rect = title_text.get_rect(center=(self.width // 2, self.height // 8))
        self.screen.blit(title_text, title_rect)

        menu_font = pygame.font.SysFont(GAME_FONT, 100)
        menu_text = menu_font.render("Меню", True, WHITE)
        menu_rect = menu_text.get_rect(center=(self.width // 2, self.height // 4))
        self.screen.blit(menu_text, menu_rect)

        button_width = self.width // 5
        button_height = 50
        button_x = self.width // 2 - button_width // 2
        button_y_spacing = 20
        button_texts = ["Начать новую игру", "Продолжить игру", "Загрузить игру", "Настройки", "Выйти"]
        self.buttons = []
        for i, text in enumerate(button_texts):
            button_y = menu_rect.bottom + 50 + i * (button_height + button_y_spacing)
            button_rect = pygame.Rect(button_x, button_y, button_width, button_height)
            pygame.draw.rect(self.screen, GRAY, button_rect)
            button_font = pygame.font.SysFont(GAME_FONT, 30)
            button_text = button_font.render(text, True, WHITE)
            button_text_rect = button_text.get_rect(center=button_rect.center)
            self.screen.blit(button_text, button_text_rect)
            self.buttons.append(button_rect)

        pygame.display.flip()

    # Функция для генерации звезд на экране:
    def generate_stars(self, num_stars):
        # Создаем num_stars случайных звезд.
        for _ in range(num_stars):
            # Случайные координаты и размер звезды.
            x = random.randint(0, self.width)
            y = random.randint(0, self.height)
            size = random.randint(1, 3)
            # Добавляем звезду в список.
            self.stars.append([x, y, size])

    # Функция для отрисовки элементов на экране:
    def draw(self):
        """Отрисовывает все элементы на экране."""
        self.screen.fill((0, 0, 0))  # Чистим экран
        for star in self.stars:
            pygame.draw.circle(self.screen, (255, 255, 255), (star[0], star[1]), star[2])

        # Отрисовка персонажа
        flipped_image = pygame.transform.flip(self.shooting_image, self.flipped_image, False)
        self.screen.blit(flipped_image, (self.test_x, self.test_y))

        # Отображение оставшихся патронов
        font = pygame.font.SysFont(None, 36)
        ammo_text = font.render(f"Ammo: {self.ammo}", True, (255, 255, 255))
        self.screen.blit(ammo_text, (10, 10))

    # Функция для загрузки изображений персонажей:
    def load_images(self):
        """Загружает изображения для игры, обрабатывая ошибки."""
        self.character_images = []
        try:
            self.shooting_image = pygame.image.load(os.path.join(data_dir, 'test.png')).convert_alpha()
            self.shooting_image = scale_image(self.shooting_image, 0.5)  # Масштабируем изображение
            if self.shooting_image is None:
                print("Ошибка загрузки shooting_image.")

            self.shooting_range_image = pygame.image.load(os.path.join(data_dir, 'poligon.png')).convert()
            self.shooting_range_image = pygame.transform.scale(self.shooting_range_image, (self.width, self.height))

            self.target_image = pygame.image.load(os.path.join(data_dir, 'target.png')).convert_alpha()
            self.target_image = scale_image(self.target_image, 0.5)  # Масштабируем изображение
            if self.target_image is None:
                print("Ошибка загрузки target_image.")

            self.aim_cursor_image = pygame.image.load(os.path.join(data_dir, 'aim.png')).convert_alpha()
            self.aim_cursor, self.aim_cursor_rect = self.create_cursor(self.aim_cursor_image)

            for char_data in characters:
                try:
                    image = pygame.image.load(os.path.join(data_dir, char_data.image_name)).convert_alpha()
                    bright_image = pygame.image.load(
                        os.path.join(data_dir, char_data.bright_image_name)).convert_alpha()
                    image = scale_image(image, 0.6)
                    bright_image = scale_image(bright_image, 0.6)
                    self.character_images.append(image)
                    char_data.image = image
                    char_data.bright_image = bright_image
                    char_data.rect = image.get_rect()
                except pygame.error as e:
                    print(f"Ошибка загрузки изображения {char_data.image_name or char_data.bright_image_name}: {e}")
                    self.character_images.append(None)
                    char_data.image = None
                    char_data.bright_image = None
                except Exception as e:
                    print(f"Непредвиденная ошибка при загрузке изображения: {e}")
                    self.character_images.append(None)
                    char_data.image = None
                    char_data.bright_image = None
                    pygame.quit()
                    sys.exit()
        except pygame.error as e:
            print(f"Ошибка загрузки изображений: {e}")
            pygame.quit()
            sys.exit()
        except Exception as e:
            print(f"Непредвиденная ошибка: {e}")
            pygame.quit()
            sys.exit() 

    # Функция для изменения размера изображения:

    # Функция для загрузки звуков:
    def load_sounds(self):
        """Загружает звуки, обрабатывая исключения"""
        try:
            self.reload_sound = pygame.mixer.Sound(os.path.join('sounds', 'reload.wav'))
            self.shot_sound = pygame.mixer.Sound(os.path.join('sounds', 'shot.wav'))
        except pygame.error as e:
            print(f"Ошибка при загрузке звуков: {e}")
            pygame.quit()
            sys.exit()

        except Exception as e:
            print(f"Непредвиденная ошибка: {e}")
            pygame.quit()
            sys.exit()

    # Функция для отображения вступительной истории:
    def show_story(self):
        # Текст истории, разбитый на строки.
        story_text = [
            "В далеком будущем...",
            "Миры соединяются с помощью таинственных порталов.",
            "Они стремятся разрушить все на своем пути.",
            "Города падут, и надежда угаснет, если не встать на защиту.",
            "Но среди хаоса появляются герои — отважные защитники.",
            "Они готовы сразиться с надвигающейся угрозой.",
            "Объединив силы, герои должны закрыть портал и остановить нашествие.",
            "Судьба человечества висит на волоске.",
            "Приготовьтесь к битве за выживание.",
            "Время действовать настало!"
        ]
        # Создаем объект шрифта.
        font = pygame.font.SysFont(None, 64)
        # Начальное смещение по вертикали для текста.
        y_offset = 200
        # Создаем поверхности с текстом для каждой строки.
        text_surfaces = [font.render(line, True, YELLOW) for line in story_text]
        # Вычисляем вертикальные позиции для каждой строки текста.
        y_positions = [y_offset + i * 70 for i in range(len(text_surfaces))]
        # Скорость прокрутки текста.
        scroll_speed = 1
        # Флаг, указывающий, что все строки вышли за пределы экрана.
        all_lines_offscreen = False
        # Флаг для пропуска истории.
        skip_story = False
        # Флаг, управляющий циклом показа истории.
        running = True
        # Создаем объект для управления временем.
        clock = pygame.time.Clock()

        # Цикл отображения истории:
        while running and not all_lines_offscreen:
            # Обработка событий.
            for event in pygame.event.get():
                # Закрытие окна.
                if event.type == pygame.QUIT:
                    running = False
                # Нажатие клавиши.
                if event.type == pygame.KEYDOWN:
                    # Пропуск истории по нажатию пробела.
                    if event.key == pygame.K_SPACE:
                        skip_story = True
                        break

            # Пропуск истории.
            if skip_story:
                break

            # Очистка экрана и отрисовка звезд.
            self.screen.fill(BLACK)
            for star in self.stars:
                pygame.draw.circle(self.screen, WHITE, (star[0], star[1]), star[2])
            # Отрисовка видимых строк текста.
            visible_text = []
            for i, text_surface in enumerate(text_surfaces):
                y_positions[i] -= scroll_speed
                if y_positions[i] + text_surface.get_height() > 0:
                    text_rect = text_surface.get_rect(center=(self.width // 2, y_positions[i]))
                    self.screen.blit(text_surface, text_rect)
                    visible_text.append(text_surface)
            # Проверка, вышли ли все строки за пределы экрана.
            all_lines_offscreen = all(
                y_positions[i] + text_surfaces[i].get_height() <= 0 for i in range(len(text_surfaces)))
            # Обновление экрана.
            pygame.display.flip()
            # Управление скоростью обновления экрана.
            clock.tick(30)

    # Функция для отображения главного меню:
    def show_menu_screen(self):
        # Флаг, управляющий циклом меню.
        menu_running = True
        # Сбрасываем флаг открытия меню из стрельбища.
        self.menu_opened_from_shooting_range = False
        # Сохраняем предыдущие координаты персонажа перед переходом в меню.
        if self.selected_character:
            self.previous_test_x = self.test_x
            self.previous_test_y = self.test_y
            self.previous_flipped_image = self.flipped_image

        # Цикл обработки событий меню:
        while menu_running:
            # Отрисовываем меню.
            self.draw_menu_screen()
            # Обрабатываем события.
            for event in pygame.event.get():
                # Закрытие окна.
                if event.type == pygame.QUIT:
                    pygame.quit()
                    sys.exit()
                # Нажатие клавиши Escape.
                elif event.type == pygame.KEYDOWN:
                    if event.key == pygame.K_ESCAPE:
                        menu_running = False
                # Нажатие мыши.
                elif event.type == pygame.MOUSEBUTTONDOWN:
                    # Обработка нажатия на кнопки меню.
                    for i, rect in enumerate(self.buttons):
                        if rect.collidepoint(event.pos):
                            # Воспроизведение звука нажатия кнопки.
                            if self.click_sound:
                                self.click_sound.play()
                            # Обработка нажатия на разные кнопки меню.
                            if i == 0:
                                self.choose_character()
                            elif i == 1:
                                menu_running = False
                                if self.menu_opened_from_shooting_range:
                                    self.test_x = self.previous_test_x
                                    self.test_y = self.previous_test_y
                                    self.flipped_image = self.previous_flipped_image
                            elif i == 3:
                                self.show_settings_menu()  # Не реализованно
                            elif i == 4:
                                self.show_exit_menu()  # Не реализованно

    # Функция для выбора персонажа:
    # Функция для отображения меню выхода из игры:
    def show_exit_menu(self):
        # Создаем объекты шрифтов для заголовка и кнопок.
        font_title = pygame.font.SysFont(GAME_FONT, 100)
        font_button = pygame.font.SysFont(GAME_FONT, 72)
        # Ширина и высота кнопок.
        button_width = 300
        button_height = 120
        button_spacing = 80

        # Создаем прямоугольники для кнопок "Выйти" и "Остаться".
        button1_rect = pygame.Rect((self.width - button_width) // 2,
                                   (self.height // 2) - button_height - button_spacing // 2, button_width,
                                   button_height)
        button2_rect = pygame.Rect((self.width - button_width) // 2, (self.height // 2) + button_spacing // 2,
                                   button_width, button_height)

        # Флаг, контролирующий отображение меню выхода.
        exit_menu = True
        while exit_menu:
            for event in pygame.event.get():
                # Обработка события закрытия окна.
                if event.type == pygame.QUIT:
                    pygame.quit()
                    quit()
                # Обработка нажатия мыши.
                if event.type == pygame.MOUSEBUTTONDOWN:
                    # Если нажатие на кнопку "Выйти", закрываем игру.
                    if button1_rect.collidepoint(event.pos):
                        pygame.quit()
                        quit()
                    # Если нажатие на кнопку "Остаться", закрываем меню.
                    if button2_rect.collidepoint(event.pos):
                        exit_menu = False

            # Отрисовка фона, звезд и текста в меню.
            self.screen.fill(BLACK)
            for star in self.stars:
                pygame.draw.circle(self.screen, WHITE, (star[0], star[1]), star[2])

            title_text = font_title.render("Выйти из игры?", True, WHITE)
            title_rect = title_text.get_rect(center=(self.width // 2, self.height // 4))
            self.screen.blit(title_text, title_rect)

            # Отрисовка кнопки "Выйти".
            pygame.draw.rect(self.screen, (80, 80, 200), button1_rect)
            button1_text = font_button.render("Выйти", True, WHITE)
            button1_text_rect = button1_text.get_rect(center=button1_rect.center)
            self.screen.blit(button1_text, button1_text_rect)

            # Отрисовка кнопки "Остаться".
            pygame.draw.rect(self.screen, (80, 80, 200), button2_rect)
            button2_text = font_button.render("Остаться", True, WHITE)
            button2_text_rect = button2_text.get_rect(center=button2_rect.center)
            self.screen.blit(button2_text, button2_text_rect)

            # Обновление экрана.
            pygame.display.flip()

    def choose_character(self):
        # Выбранный персонаж (изначально не выбран).
        selected_character = None
        # Флаг, указывающий, что кнопка подтверждения нажата.
        confirm_button_pressed = False
        # Цикл выбора персонажа:
        while not confirm_button_pressed:
            # Обработка событий.
            for event in pygame.event.get():
                # Закрытие окна.
                if event.type == pygame.QUIT:
                    pygame.quit()
                    sys.exit()
                # Нажатие мыши.
                if event.type == pygame.MOUSEBUTTONDOWN:
                    # Проверка нажатия на изображение персонажа.
                    for i, char in enumerate(characters):
                        if self.character_images[i] and char.rect and char.rect.collidepoint(event.pos):
                            # Выделяем выбранного персонажа.
                            selected_character = char
                            char.highlighted = True
                            for other_char in characters:
                                if other_char != char:
                                    other_char.highlighted = False
                            break
                # Нажатие на кнопку "Подтвердить".
                if event.type == pygame.MOUSEBUTTONDOWN:
                    button_rect = pygame.Rect(self.width // 2 - 150, self.height // 2 + 150 + 100, 300, 80)
                    if button_rect.collidepoint(event.pos) and selected_character:
                        confirm_button_pressed = True

            # Отрисовка экрана выбора персонажа.
            self.draw_choose_character_screen()
            # Если кнопка подтверждения нажата и персонаж выбран.
            if confirm_button_pressed and selected_character:
                # Открытие поля ввода имени персонажа.
                self.player_name = input_box(self.screen, "Введите имя персонажа:", self.width, self.height, self.stars)
                # Сохраняем выбранного персонажа.
                self.selected_character = selected_character
                # Показ вступительного ролика для персонажа.
                self.show_character_intro(selected_character)
        # Возвращаем выбранного персонажа.
        return selected_character

    # Функция для отрисовки экрана выбора персонажа:
    def draw_choose_character_screen(self):
        # Очищаем экран и рисуем звезды.
        self.screen.fill(BLACK)
        for star in self.stars:
            pygame.draw.circle(self.screen, WHITE, (star[0], star[1]), star[2])

        # Отрисовка изображений персонажей:
        if self.character_images:
            try:
                # Определение индекса и высоты изображения "Русский военный" для выравнивания по высоте.
                russian_soldier_index = characters.index(
                    next(char for char in characters if char.name == "Русский военный"))
                russian_soldier_image = self.character_images[russian_soldier_index]
                russian_soldier_image.get_width()
                russian_soldier_image.get_height()
            except (StopIteration, ValueError, IndexError):
                print("Error: 'Русский военный' not found or images not loaded properly.")
                return

            spacing = 25
            total_width = sum(img.get_width() for img in self.character_images) + (len(characters) - 1) * spacing
            x_offset = max(0, (self.width - total_width) // 2)

            # Цикл отрисовки изображений персонажей:
            for i, char in enumerate(characters):
                if self.character_images[i]:
                    try:
                        # Определение индекса и высоты изображения "Русский военный" для выравнивания по высоте.
                        russian_soldier_index = characters.index(
                            next(c for c in characters if c.name == "Русский военный"))
                        base_height = self.character_images[russian_soldier_index].get_height()
                    except (StopIteration, ValueError, IndexError):
                        print("Error: 'Русский военный' not found or images not loaded properly.")
                        return

                    target_height = base_height
                    aspect_ratio = self.character_images[i].get_width() / self.character_images[i].get_height()
                    new_width = int(target_height * aspect_ratio)

                    # Масштабирование изображений для выравнивания по высоте:
                    scaled_image = pygame.transform.scale(self.character_images[i], (new_width, target_height))
                    scaled_bright_image = pygame.transform.scale(characters[i].bright_image,
                                                                 (new_width, target_height))

                    x_pos = x_offset + sum(img.get_width() for img in self.character_images[:i]) + i * spacing
                    char.rect = pygame.Rect(x_pos, (self.height - target_height) // 2, new_width, target_height)
                    # Отрисовка изображения персонажа (подсвеченное, если выделен):
                    self.screen.blit(scaled_bright_image if char.highlighted else scaled_image, char.rect)

        # Отрисовка кнопки "Подтвердить":
        button_rect = pygame.Rect(self.width // 2 - 150, self.height // 2 + 150 + 100, 300, 80)
        pygame.draw.rect(self.screen, (80, 80, 200), button_rect, border_radius=20)
        font = pygame.font.SysFont(None, 48)
        text = font.render("Подтвердить", True, WHITE)
        text_rect = text.get_rect(center=button_rect.center)
        self.screen.blit(text, text_rect)
        pygame.display.flip()

    # Функция для показа вступительного ролика персонажа:
    def show_character_intro(self, selected_character):
        # Словарь с текстами введения для каждого персонажа.
        intro_texts = {
            "Немецкий медик": [
                "Вы — опытный немецкий военный медик, оказавшийся втянутым в нечто большее, чем мог представить.",
                f"Вас зовут {self.player_name}, и ваш профессионализм и хладнокровие – ваши главные козыри в этом "
                f"безумии.",
                "Вы прибыли на военную базу в России…"
            ],
            "Военный Нигерии": [
                "Вы — опытный солдат из Нигерии, привыкший к жаре и опасностям своей родины.",
                f"Вас зовут {self.player_name}, но даже ваша выучка не приготовила вас к суровой реальности этого места",
                "Российская военная база стала вашей новой реальностью…"
            ],
            "Русский военный": [
                "Вы — опытный русский военный, привыкший к суровым условиям.",
                f"Вас зовут {self.player_name}, но даже вам предстоит столкнуться с угрозой, превосходящей все ваши ожидания.",
                "Вы находитесь на секретной военной базе в России…"
            ],
        }

        # Попытка загрузить фоновое изображение для введения.
        try:
            intro_background = pygame.image.load(os.path.join(data_dir, "intro_background.png")).convert()
            intro_background = pygame.transform.scale(intro_background, (self.width, self.height))
        except pygame.error as e:
            print(f"Error loading intro background: {e}")
            intro_background = None

        # Создаем объект шрифта для отображения текста введения.
        font = pygame.font.SysFont(None, 48)
        DARK_GRAY = (50, 50, 50)  # Цвет текста
        y_offset = 100  # Начальная вертикальная позиция текста
        # Создаем поверхности для текста введения, изменяя цвет.
        text_surfaces = [font.render(line, True, DARK_GRAY) for line in intro_texts.get(selected_character.name, [])]
        y_positions = [y_offset + i * 70 for i in range(len(text_surfaces))]
        clock = pygame.time.Clock()

        # Цикл для отображения текста введения:
        running = True
        while running:
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    pygame.quit()
                    sys.exit()
                # Закрытие введения по нажатию любой клавиши.
                if event.type == pygame.KEYDOWN:
                    running = False

            # Отрисовка фона или черного цвета, если фона нет.
            if intro_background:
                self.screen.blit(intro_background, (0, 0))
            else:
                self.screen.fill(BLACK)

            # Отрисовка текста введения.
            for i, text_surface in enumerate(text_surfaces):
                text_rect = text_surface.get_rect(center=(self.width // 2, y_positions[i]))
                self.screen.blit(text_surface, text_rect)

            # Обновление экрана.
            pygame.display.flip()
            clock.tick(30)  # Ограничение по частоте кадров

        # Очистка экрана после введения и переход к интерфейсу стрельбища.
        self.screen.fill(BLACK)
        self.show_shooting_range()  # Приглашение на стрельбище

    # Функция для отображения полигон стрельбы:
    def show_shooting_range(self):
        """Displays the shooting range game screen with shooting animation."""
        self.load_shooting_resources()
        self.test_x, self.test_y, self.flipped_image, self.ammo = self.setup_game_variables()
        self.keys_pressed = {pygame.K_a: False, pygame.K_d: False} # Добавили инициализацию
        self.reloading = False # Добавили инициализацию

        running = True
        while running:
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    pygame.quit()
                    sys.exit()
                running = self.handle_events(event)

            self.update()
            self.draw_shooting_screen()
            pygame.display.flip()

    def draw_shooting_screen(self):
        """Draws the shooting range elements on the screen."""
        self.screen.fill(BLACK)
        self.screen.blit(self.shooting_range_image, (0, 0))  # Добавили отрисовку фона

        # Отрисовка персонажа
        flipped_image = pygame.transform.flip(self.shooting_image, self.flipped_image, False)
        self.screen.blit(flipped_image, (self.test_x, self.test_y))

        # Отображение оставшихся патронов
        ammo_text = self.font.render(f"Ammo: {self.ammo}", True, WHITE)
        self.screen.blit(ammo_text, (10, 10))

        # Отрисовка мишени (добавлено)
        self.screen.blit(self.target_image, (self.target_x, self.target_y))

        # Отрисовка курсора (добавлено)
        if self.aim_cursor:
            mouse_x, mouse_y = pygame.mouse.get_pos()
            self.screen.blit(self.aim_cursor,
                             (mouse_x - self.aim_cursor_rect.width // 2, mouse_y - self.aim_cursor_rect.height // 2))

        pygame.display.flip()  # переместил сюда

    def load_shooting_resources(self):
        """Loads images and sounds for the shooting range."""
        self.shooting_range_image = pygame.image.load(os.path.join(data_dir, "poligon.png")).convert()
        self.shooting_range_image = pygame.transform.scale(self.shooting_range_image, (self.width, self.height))
        self.test_image = pygame.image.load(os.path.join(data_dir, "test.png")).convert_alpha()
        self.test_image = pygame.transform.scale(self.test_image,
                                                 (self.test_image.get_width() // 2, self.test_image.get_height() // 2))
        self.target_image = pygame.image.load(os.path.join(data_dir, "target.png")).convert_alpha()
        self.target_image = pygame.transform.scale(self.target_image, (
        self.target_image.get_width() // 2, self.target_image.get_height() // 2))
        self.patron_image = pygame.image.load(os.path.join(data_dir, "patron.png")).convert_alpha()
        self.patron_image = pygame.transform.scale(self.patron_image, (
        self.patron_image.get_width() // 2, self.patron_image.get_height() // 2))
        self.aim_cursor_image = pygame.image.load(os.path.join(data_dir, "aim.png")).convert_alpha()
        self.aim_cursor_image = pygame.transform.scale(self.aim_cursor_image, (
        self.aim_cursor_image.get_width() // 2, self.aim_cursor_image.get_height() // 2))
        self.load_sounds()  # Загрузка звуков, которую можно вынести в отдельную функцию

    def setup_game_variables(self):
        """Initializes and returns game variables for the shooting range."""
        test_x = self.test_x
        test_y = self.height - self.test_image.get_height() - 28
        flipped_image = self.flipped_image
        ammo = 10
        return test_x, test_y, flipped_image, ammo

    def handle_events(self, event):
        """Обрабатывает события для управления."""
        if event.type == pygame.KEYDOWN:
            if event.key in self.keys_pressed:
                self.keys_pressed[event.key] = True
            if event.key == pygame.K_r and not self.reloading and self.ammo < 10:
                self.reloading = True
                if self.reload_sound:
                    self.reload_sound.play()

        elif event.type == pygame.KEYUP:
            if event.key in self.keys_pressed:
                self.keys_pressed[event.key] = False

        elif event.type == pygame.MOUSEBUTTONDOWN:
            if event.button == 1:  # Левый клик мыши для стрельбы
                self.shoot()

    def update(self):
        """Обновление состояния игры."""
        # Обработка движения персонажа
        if self.keys_pressed[pygame.K_d]:
            self.test_x += 5  # Перемещение вправо
        if self.keys_pressed[pygame.K_a]:
            self.test_x -= 5  # Перемещение влево

        # Обработка перезарядки
        if self.reloading:
            # Перезарядка занимает 2 секунды
            if pygame.time.get_ticks() % 2000 < 1000:
                self.ammo = 10
                self.reloading = False

    def shoot(self):
        """Обработка выстрела."""
        if self.ammo > 0:
            if self.shot_sound:
                self.shot_sound.play()
            self.ammo -= 1  # Уменьшаем количество патронов

    def process_keypress(self, event, ammo):
        """Processes key presses for movement, shooting, and reloading."""
        # Обработка ключей для движения
        if event.key == pygame.K_d:
            self.keys_pressed[pygame.K_d] = True
        elif event.key == pygame.K_a:
            self.keys_pressed[pygame.K_a] = True
        elif event.key == pygame.K_r and not self.reloading and ammo < 10:
            self.reloading = True
            self.reload_start_time = pygame.time.get_ticks()
            if self.reload_sound:
                self.reload_sound.play()

    def update_ammo_status(self):
        """Updates ammo count and handles reloading."""
        if self.reloading:
            # Перезарядка занимает 2 секунды
            if pygame.time.get_ticks() % 2000 < 1000:
                self.ammo = 10
                self.reloading = False

    def display_ammo(self, ammo):
        """Displays the current ammo count on screen."""
        font = pygame.font.SysFont(None, 36)
        ammo_text = font.render(str(ammo), True, WHITE)
        text_rect = ammo_text.get_rect(center=(self.patron_x + self.patron_image.get_width() // 2,
                                               self.patron_y + self.patron_image.get_height() // 2 - 10))
        self.screen.blit(ammo_text, text_rect)

    def show_aim_cursor(self):
        """Displays the aim cursor on the screen."""
        if self.aim_cursor and self.aim_cursor_rect and self.target_image.get_rect(
                topleft=(self.target_x, self.target_y)).collidepoint(pygame.mouse.get_pos()):
            mouse_x, mouse_y = pygame.mouse.get_pos()
            self.screen.blit(self.aim_cursor, (
                mouse_x - self.aim_cursor_rect.width // 2, mouse_y - self.aim_cursor_rect.height // 2))
        else:
            pygame.mouse.set_visible(True)

    # Функция для создания курсора за пределами изображения:

    # Функция для отображения меню настроек:
    def show_settings_menu(self):
        running = True
        self.dragging_slider = False  # Добавлена переменная для отслеживания перетаскивания

        while running:
            self.screen.fill(BLACK)  # Очистка экрана для меню настроек
            for star in self.stars:
                pygame.draw.circle(self.screen, WHITE, (star[0], star[1]), star[2])
            title_font = pygame.font.SysFont(GAME_FONT, 100)
            title_text = title_font.render("Настройки", True, RED)
            title_rect = title_text.get_rect(center=(self.width // 2, self.height // 4))
            self.screen.blit(title_text, title_rect)

            # Ширина и высота кнопок меню
            button_width = self.width // 5
            button_height = 60
            button_x = self.width // 2 - button_width // 2
            button_y_spacing = 30

            # Определение кнопок в меню
            button_texts = ["Назад", "Применить"]
            self.settings_buttons = []

            # Отрисовка кнопок:
            for i, text in enumerate(button_texts):
                button_y = title_rect.bottom + 50 + i * (button_height + button_y_spacing)
                button_rect = pygame.Rect(button_x, button_y, button_width, button_height)
                pygame.draw.rect(self.screen, GRAY, button_rect)
                button_font = pygame.font.SysFont(GAME_FONT, 30)
                button_text = button_font.render(text, True, WHITE)
                button_text_rect = button_text.get_rect(center=button_rect.center)
                self.screen.blit(button_text, button_text_rect)
                self.settings_buttons.append(button_rect)

            # Ползунок громкости
            slider_width = 300
            slider_height = 40
            slider_x = self.width // 2 - slider_width // 2
            slider_y = title_rect.bottom + 50 + 2 * (button_height + button_y_spacing) + 30

            self.volume_slider_rect = pygame.Rect(slider_x, slider_y, slider_width, slider_height)
            pygame.draw.rect(self.screen, GRAY, self.volume_slider_rect, border_radius=10)

            # Отрисовка "ползунка" на ползунке громкости:
            thumb_x = slider_x + int(self.volume * slider_width) - slider_height // 2
            thumb_rect = pygame.Rect(thumb_x, slider_y, slider_height, slider_height)
            pygame.draw.rect(self.screen, RED, thumb_rect, border_radius=10)

            pygame.display.flip()

            for event in pygame.event.get():
                if event.type == pygame.QUIT:

                    pygame.quit()
                    sys.exit()
                elif event.type == pygame.MOUSEBUTTONDOWN:
                    for i, rect in enumerate(self.settings_buttons):
                        if rect.collidepoint(event.pos):
                            if self.click_sound:
                                self.click_sound.play()
                            if i == 0:  # Кнопка "Назад"
                                running = False
                            elif i == 1:  # Кнопка "Применить"
                                pass  # Здесь может быть обработка применения настроек

                    # Проверка, попадает ли курсор на ползунок громкости.
                    if self.volume_slider_rect.collidepoint(event.pos):
                        self.dragging_slider = True  # Начало перетаскивания
                        self.adjust_volume(event)  # Регулировка громкости

                elif event.type == pygame.MOUSEBUTTONUP:
                    self.dragging_slider = False  # Конец перетаскивания
                elif event.type == pygame.MOUSEMOTION:
                    if self.dragging_slider:
                        self.adjust_volume(event)  # Регулировка громкости при перемещении мыши

            thumb_x = slider_x + int(self.volume * slider_width) - slider_height // 2
            thumb_rect = pygame.Rect(thumb_x, slider_y, slider_height, slider_height)
            pygame.draw.rect(self.screen, RED, thumb_rect, border_radius=10)
            pygame.display.flip()

    # Функция для регулировки громкости на основе положения мыши:
    def adjust_volume(self, event):
        slider_width = self.volume_slider_rect.width
        mouse_x = event.pos[0]
        # Регулируем громкость в диапазоне от 0 до 1.
        self.volume = max(0, min(1, (mouse_x - self.volume_slider_rect.left) / slider_width))
        if self.click_sound:
            self.click_sound.set_volume(self.volume)


# Конец класса MainScreen.

if __name__ == "__main__":
    pygame.init() # инициализация еще раз, на всякий случай
    infoObject = pygame.display.Info()
    mainscreen = MainScreen(infoObject.current_w, infoObject.current_h)
    mainscreen.run()
    pygame.quit()
