# Импорт необходимых библиотек Pygame и других модулей Python.
import pygame
import random
import os
import sys
import time

# Инициализация Pygame:
# pygame.init() инициализирует все модули Pygame, необходимые для работы с графикой, звуком и вводом.
# pygame.mixer.init() инициализирует модуль mixer, ответственный за воспроизведение звука.
pygame.init()
pygame.mixer.init()

# Определение констант:
# FPS: количество кадров в секунду (скорость обновления экрана).
FPS = 60
# Цветовые константы в формате RGB (Red, Green, Blue):
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
GRAY = (50, 50, 50)
YELLOW = (255, 255, 0)
RED = (255, 0, 0)
# Пути к директориям с данными (изображения) и звуками:
data_dir = os.path.join(os.path.dirname(__file__), "data")  # Динамически определяем путь к папке "data"
sounds_dir = os.path.join(os.path.dirname(__file__), "sounds")  # Динамически определяем путь к папке "sounds"
# Имя шрифта, используемого для отображения текста:
GAME_FONT = "comicsansms"  # Можно изменить на другой системный шрифт


# Класс Character:
# Представляет персонажа в игре. Хранит имя, пути к изображениям (обычное и выделенное), и скорость.
class Character:
    def __init__(self, name, image_name, bright_image_name, speed):
        # name: Имя персонажа (строка).
        self.name = name
        # image_name: Имя файла с изображением персонажа (строка).
        self.image_name = image_name
        # bright_image_name: Имя файла с подсвеченным изображением персонажа (строка).
        self.bright_image_name = bright_image_name
        # speed: Скорость передвижения персонажа (число).
        self.speed = speed
        # image: Поверхность Pygame с изображением персонажа. Инициализируется в load_images().
        self.image = None
        # bright_image: Поверхность Pygame с подсвеченным изображением персонажа. Инициализируется в load_images().
        self.bright_image = None
        # Rect: Прямоугольник, представляющий область, занимаемую изображением персонажа. Инициализируется в
        # load_images().
        self.rect = None
        # highlighted: Флаг, указывающий, выделен ли персонаж.
        self.highlighted = False


# Создание списка персонажей:
# Список объектов класса Character, представляющих доступных для выбора персонажей.
characters = [
    Character("Немецкий медик", "german_medic.png", "german_medic_bright.png", 5),
    Character("Военный Нигерии", "nigerian_soldier.png", "nigerian_soldier_bright.png", 2),
    Character("Русский военный", "russian_soldier.png", "russian_soldier_bright.png", 3),
]


# Функция для отрисовки текста на экране с эффектом размытия (для улучшения визуального восприятия):
def draw_pixel_text(surface, text, font_size, x, y, color, font=GAME_FONT):
    # Создаем объект шрифта с указанным именем и размером.
    font = pygame.font.SysFont(font, font_size)
    # Рендерим текст, создавая поверхность с текстом.
    text_surface = font.render(text, True, color)
    # Получаем прямоугольник, охватывающий текст.
    text_rect = text_surface.get_rect(center=(x, y))
    # Масштабируем поверхность дважды (для размытия) и уменьшаем обратно до исходного размера.
    blurred_surface = pygame.transform.scale(text_surface,
                                             (text_surface.get_width() * 2, text_surface.get_height() * 2))
    blurred_surface = pygame.transform.scale(blurred_surface, text_surface.get_size())
    # Отображаем размытый текст на указанной поверхности.
    surface.blit(blurred_surface, text_rect)


# Функция для создания и обработки текстового поля ввода:
def input_box(screen, message, width, height, stars):
    # Создаем объект шрифта размером 36.
    font = pygame.font.Font(None, 36)
    # Создаем прямоугольник для поля ввода.
    input_rect = pygame.Rect((width - 600) // 2, (height - 50) // 2, 600, 50)
    # Цвета для активного и неактивного состояния поля ввода.
    color_active = pygame.Color('lightskyblue3')
    color_passive = pygame.Color('chartreuse4')
    # Флаг, указывающий, активно ли поле ввода.
    active = False
    # Введенный текст.
    text = ''
    # Флаг, управляющий циклом ввода.
    running = True
    # Цикл обработки событий поля ввода:
    while running:
        # Обрабатываем события.
        for event in pygame.event.get():
            # Закрытие окна.
            if event.type == pygame.QUIT:
                pygame.quit()
                quit()
            # Нажатие мыши.
            if event.type == pygame.MOUSEBUTTONDOWN:
                # Если клик внутри прямоугольника, поле ввода становится активным.
                if input_rect.collidepoint(event.pos):
                    active = True
                else:
                    active = False
            # Нажатие клавиш.
            if event.type == pygame.KEYDOWN:
                # Только если поле ввода активно.
                if active:
                    # Enter: завершаем ввод.
                    if event.key == pygame.K_RETURN:
                        running = False
                    # Backspace: удаляем последний символ.
                    elif event.key == pygame.K_BACKSPACE:
                        text = text[:-1]
                    # Другие клавиши: добавляем символ к тексту.
                    else:
                        text += event.unicode

        # Отрисовка фона, звезд, сообщения и поля ввода.
        screen.fill(BLACK)
        for star in stars:
            pygame.draw.circle(screen, WHITE, (star[0], star[1]), star[2])
        draw_pixel_text(screen, message, 48, width // 2, input_rect.top - 50, WHITE, font=GAME_FONT)
        # Устанавливаем цвет поля ввода в зависимости от состояния.
        color = color_active if active else color_passive
        # Отрисовываем прямоугольник поля ввода.
        pygame.draw.rect(screen, color, input_rect, 2)
        # Рендерим и отображаем введенный текст.
        text_surface = font.render(text, True, color)
        screen.blit(text_surface, (input_rect.x + 5, input_rect.y + 5))
        # Обновляем экран.
        pygame.display.flip()
    # Возвращаем введенный текст.
    return text


# Класс MainScreen:
# Управляет основным экраном игры, включая меню и игровую сцену.
def scale_image(image, scale_factor):
    # Вычисляем новые размеры изображения.
    new_width = int(image.get_width() * scale_factor)
    new_height = int(image.get_height() * scale_factor)
    # Масштабируем изображение и возвращаем результат.
    return pygame.transform.scale(image, (new_width, new_height))


def create_cursor(cursor_image):
    """Creates a Pygame cursor from an image. Handles potential errors."""
    try:
        # Проверяем, загружено ли изображение.
        if cursor_image is None:
            print("Warning: Cursor image not loaded correctly.")
            return None, None

        cursor_rect = cursor_image.get_rect()
        return cursor_image, cursor_rect  # Возвращаем поверхность и прямоугольник
    except AttributeError as e:
        print(f"Error getting cursor rect: {e}")
        return None, None
    except Exception as e:
        print(f"An unexpected error occurred in create_cursor: {e}")
        return None, None


class MainScreen:
    def __init__(self, width, height):
        # Ширина и высота экрана.
        self.volume_slider_rect = None
        self.settings_buttons = None
        self.aim_cursor_rect = None
        self.aim_cursor = None
        self.shot_sound = None
        self.reload_sound = None
        self.walk_sound = None
        self.click_sound = None
        self.character_images = None
        self.width = width
        self.height = height
        # Создаем игровое окно.
        self.screen = pygame.display.set_mode((self.width, self.height))
        # Список звезд для фона.
        self.stars = []
        # Генерируем звезды.
        self.generate_stars(200)
        # Загружаем изображения.
        self.load_images()
        # Имя игрока (инициализируется позже).
        self.player_name = ""
        # Выбранный персонаж (инициализируется позже).
        self.selected_character = None
        # Объект шрифта для отрисовки текста.
        self.font = pygame.font.SysFont(None, 64)
        # Список прямоугольников кнопок в меню.
        self.buttons = []
        # Громкость звуковых эффектов.
        self.volume = 0.5
        # Флаг для управления перетаскиванием ползунка громкости.
        self.dragging_slider = False
        # Загрузка звуков.
        self.load_sounds()
        # Позиции и параметры персонажа на экране стрельбища.
        self.test_x = 0
        self.test_y = 0
        self.flipped_image = False
        # Флаг, указывающий, открыто ли меню из стрельбища.
        self.menu_opened_from_shooting_range = False
        # Прежние параметры персонажа, перед переходом в меню из стрельбища.
        self.previous_test_x = 0
        self.previous_test_y = 0
        self.previous_flipped_image = False

    # Основная функция, запускающая игровой цикл:
    def run(self):
        draw_pixel_text(self.screen, "Сквозь Миры", 150, self.width // 2, self.height // 3, YELLOW,
                        font=GAME_FONT)
        pygame.display.flip()
        time.sleep(3)
        self.screen.fill(BLACK)
        self.show_story()  # Показать вступительный ролик
        self.show_menu_screen()  # Отобразить главное меню после вступления

        running = True
        while running:
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    running = False
                elif event.type == pygame.KEYDOWN:
                    if event.key == pygame.K_ESCAPE:
                        if self.selected_character:
                            self.show_menu_screen()
                        else:
                            self.show_menu_screen()
                    elif event.key == pygame.K_SPACE and self.selected_character is None:
                        self.choose_character()

            if self.selected_character:  # Показывать полигон стрельбы, только если выбран персонаж
                self.show_shooting_range()
            self.draw()  # Отрисовка игровых элементов
            pygame.display.flip()

        pygame.quit()
        sys.exit()

    # Функция для отрисовки меню:
    def draw_menu_screen(self):
        self.screen.fill(BLACK)  # Очистка экрана
        for star in self.stars:
            pygame.draw.circle(self.screen, WHITE, (star[0], star[1]), star[2])

        title_font = pygame.font.SysFont(GAME_FONT, 150)
        title_text = title_font.render("Сквозь Миры", True, (192, 192, 192))
        title_rect = title_text.get_rect(center=(self.width // 2, self.height // 8))
        self.screen.blit(title_text, title_rect)

        menu_font = pygame.font.SysFont(GAME_FONT, 100)
        menu_text = menu_font.render("Меню", True, WHITE)
        menu_rect = menu_text.get_rect(center=(self.width // 2, self.height // 4))
        self.screen.blit(menu_text, menu_rect)

        button_width = self.width // 5
        button_height = 50
        button_x = self.width // 2 - button_width // 2
        button_y_spacing = 20
        button_texts = ["Начать новую игру", "Продолжить игру", "Загрузить игру", "Настройки", "Выйти"]
        self.buttons = []
        for i, text in enumerate(button_texts):
            button_y = menu_rect.bottom + 50 + i * (button_height + button_y_spacing)
            button_rect = pygame.Rect(button_x, button_y, button_width, button_height)
            pygame.draw.rect(self.screen, GRAY, button_rect)
            button_font = pygame.font.SysFont(GAME_FONT, 30)
            button_text = button_font.render(text, True, WHITE)
            button_text_rect = button_text.get_rect(center=button_rect.center)
            self.screen.blit(button_text, button_text_rect)
            self.buttons.append(button_rect)

        pygame.display.flip()

    # Функция для генерации звезд на экране:
    def generate_stars(self, num_stars):
        # Создаем num_stars случайных звезд.
        for _ in range(num_stars):
            # Случайные координаты и размер звезды.
            x = random.randint(0, self.width)
            y = random.randint(0, self.height)
            size = random.randint(1, 3)
            # Добавляем звезду в список.
            self.stars.append([x, y, size])

    # Функция для отрисовки элементов на экране:
    def draw(self):
        # Заливаем экран черным цветом.
        self.screen.fill(BLACK)
        # Отрисовываем звезды.
        for star in self.stars:
            pygame.draw.circle(self.screen, WHITE, (star[0], star[1]), star[2])
        # Отрисовываем заголовок игры.
        draw_pixel_text(self.screen, "Сквозь Миры", 100, self.width // 2, 100, WHITE, font=GAME_FONT)
        # Если выбран персонаж, отображаем информацию о нем.
        if self.selected_character:
            draw_pixel_text(self.screen,
                            f"Выбран персонаж: {self.selected_character.name}, Имя: {self.player_name}",
                            48, self.width // 2, self.height // 2 + 100, WHITE, font=GAME_FONT)

    # Функция для загрузки изображений персонажей:
    def load_images(self):
        # Список для хранения поверхностей с изображениями персонажей.
        self.character_images = []
        # Перебираем данные о персонажах.
        for char_data in characters:
            try:
                # Загружаем обычное и подсвеченное изображения персонажа.
                image = pygame.image.load(os.path.join(data_dir, char_data.image_name)).convert_alpha()
                bright_image = pygame.image.load(os.path.join(data_dir, char_data.bright_image_name)).convert_alpha()
                # Масштабируем изображения.
                image = scale_image(image, 0.6)
                bright_image = scale_image(bright_image, 0.6)
                # Добавляем изображения в список.
                self.character_images.append(image)
                # Сохраняем изображения и прямоугольник в объекте персонажа.
                char_data.image = image
                char_data.bright_image = bright_image
                char_data.rect = image.get_rect()
            except pygame.error as e:
                # Обработка ошибок загрузки изображений.
                print(f"Error loading image {char_data.image_name}: {e}")
                self.character_images.append(None)

    # Функция для изменения размера изображения:

    # Функция для загрузки звуков:
    def load_sounds(self):
        try:
            # Загрузка звука для нажатия кнопки.
            self.click_sound = pygame.mixer.Sound(os.path.join(sounds_dir, "button_click.wav"))
            self.click_sound.set_volume(0.2)  # Установка громкости
        except pygame.error as e:
            print(f"Error loading sound file: {e}")
            self.click_sound = None

    # Функция для отображения вступительной истории:
    def show_story(self):
        # Текст истории, разбитый на строки.
        story_text = [
            "В далеком будущем...",
            "Миры соединяются с помощью таинственных порталов.",
            "Они стремятся разрушить все на своем пути.",
            "Города падут, и надежда угаснет, если не встать на защиту.",
            "Но среди хаоса появляются герои — отважные защитники.",
            "Они готовы сразиться с надвигающейся угрозой.",
            "Объединив силы, герои должны закрыть портал и остановить нашествие.",
            "Судьба человечества висит на волоске.",
            "Приготовьтесь к битве за выживание.",
            "Время действовать настало!"
        ]
        # Создаем объект шрифта.
        font = pygame.font.SysFont(None, 64)
        # Начальное смещение по вертикали для текста.
        y_offset = 200
        # Создаем поверхности с текстом для каждой строки.
        text_surfaces = [font.render(line, True, YELLOW) for line in story_text]
        # Вычисляем вертикальные позиции для каждой строки текста.
        y_positions = [y_offset + i * 70 for i in range(len(text_surfaces))]
        # Скорость прокрутки текста.
        scroll_speed = 1
        # Флаг, указывающий, что все строки вышли за пределы экрана.
        all_lines_offscreen = False
        # Флаг для пропуска истории.
        skip_story = False
        # Флаг, управляющий циклом показа истории.
        running = True
        # Создаем объект для управления временем.
        clock = pygame.time.Clock()

        # Цикл отображения истории:
        while running and not all_lines_offscreen:
            # Обработка событий.
            for event in pygame.event.get():
                # Закрытие окна.
                if event.type == pygame.QUIT:
                    running = False
                # Нажатие клавиши.
                if event.type == pygame.KEYDOWN:
                    # Пропуск истории по нажатию пробела.
                    if event.key == pygame.K_SPACE:
                        skip_story = True
                        break

            # Пропуск истории.
            if skip_story:
                break

            # Очистка экрана и отрисовка звезд.
            self.screen.fill(BLACK)
            for star in self.stars:
                pygame.draw.circle(self.screen, WHITE, (star[0], star[1]), star[2])
            # Отрисовка видимых строк текста.
            visible_text = []
            for i, text_surface in enumerate(text_surfaces):
                y_positions[i] -= scroll_speed
                if y_positions[i] + text_surface.get_height() > 0:
                    text_rect = text_surface.get_rect(center=(self.width // 2, y_positions[i]))
                    self.screen.blit(text_surface, text_rect)
                    visible_text.append(text_surface)
            # Проверка, вышли ли все строки за пределы экрана.
            all_lines_offscreen = all(
                y_positions[i] + text_surfaces[i].get_height() <= 0 for i in range(len(text_surfaces)))
            # Обновление экрана.
            pygame.display.flip()
            # Управление скоростью обновления экрана.
            clock.tick(30)

    # Функция для отображения главного меню:
    def show_menu_screen(self):
        # Флаг, управляющий циклом меню.
        menu_running = True
        # Сбрасываем флаг открытия меню из стрельбища.
        self.menu_opened_from_shooting_range = False
        # Сохраняем предыдущие координаты персонажа перед переходом в меню.
        if self.selected_character:
            self.previous_test_x = self.test_x
            self.previous_test_y = self.test_y
            self.previous_flipped_image = self.flipped_image

        # Цикл обработки событий меню:
        while menu_running:
            # Отрисовываем меню.
            self.draw_menu_screen()
            # Обрабатываем события.
            for event in pygame.event.get():
                # Закрытие окна.
                if event.type == pygame.QUIT:
                    pygame.quit()
                    sys.exit()
                # Нажатие клавиши Escape.
                elif event.type == pygame.KEYDOWN:
                    if event.key == pygame.K_ESCAPE:
                        menu_running = False
                # Нажатие мыши.
                elif event.type == pygame.MOUSEBUTTONDOWN:
                    # Обработка нажатия на кнопки меню.
                    for i, rect in enumerate(self.buttons):
                        if rect.collidepoint(event.pos):
                            # Воспроизведение звука нажатия кнопки.
                            if self.click_sound:
                                self.click_sound.play()
                            # Обработка нажатия на разные кнопки меню.
                            if i == 0:
                                self.choose_character()
                            elif i == 1:
                                menu_running = False
                                if self.menu_opened_from_shooting_range:
                                    self.test_x = self.previous_test_x
                                    self.test_y = self.previous_test_y
                                    self.flipped_image = self.previous_flipped_image
                            elif i == 3:
                                self.show_settings_menu()  # Не реализованно
                            elif i == 4:
                                self.show_exit_menu()  # Не реализованно

    # Функция для выбора персонажа:
    # Функция для отображения меню выхода из игры:
    def show_exit_menu(self):
        # Создаем объекты шрифтов для заголовка и кнопок.
        font_title = pygame.font.SysFont(GAME_FONT, 100)
        font_button = pygame.font.SysFont(GAME_FONT, 72)
        # Ширина и высота кнопок.
        button_width = 300
        button_height = 120
        button_spacing = 80

        # Создаем прямоугольники для кнопок "Выйти" и "Остаться".
        button1_rect = pygame.Rect((self.width - button_width) // 2,
                                   (self.height // 2) - button_height - button_spacing // 2, button_width,
                                   button_height)
        button2_rect = pygame.Rect((self.width - button_width) // 2, (self.height // 2) + button_spacing // 2,
                                   button_width, button_height)

        # Флаг, контролирующий отображение меню выхода.
        exit_menu = True
        while exit_menu:
            for event in pygame.event.get():
                # Обработка события закрытия окна.
                if event.type == pygame.QUIT:
                    pygame.quit()
                    quit()
                # Обработка нажатия мыши.
                if event.type == pygame.MOUSEBUTTONDOWN:
                    # Если нажатие на кнопку "Выйти", закрываем игру.
                    if button1_rect.collidepoint(event.pos):
                        pygame.quit()
                        quit()
                    # Если нажатие на кнопку "Остаться", закрываем меню.
                    if button2_rect.collidepoint(event.pos):
                        exit_menu = False

            # Отрисовка фона, звезд и текста в меню.
            self.screen.fill(BLACK)
            for star in self.stars:
                pygame.draw.circle(self.screen, WHITE, (star[0], star[1]), star[2])

            title_text = font_title.render("Выйти из игры?", True, WHITE)
            title_rect = title_text.get_rect(center=(self.width // 2, self.height // 4))
            self.screen.blit(title_text, title_rect)

            # Отрисовка кнопки "Выйти".
            pygame.draw.rect(self.screen, (80, 80, 200), button1_rect)
            button1_text = font_button.render("Выйти", True, WHITE)
            button1_text_rect = button1_text.get_rect(center=button1_rect.center)
            self.screen.blit(button1_text, button1_text_rect)

            # Отрисовка кнопки "Остаться".
            pygame.draw.rect(self.screen, (80, 80, 200), button2_rect)
            button2_text = font_button.render("Остаться", True, WHITE)
            button2_text_rect = button2_text.get_rect(center=button2_rect.center)
            self.screen.blit(button2_text, button2_text_rect)

            # Обновление экрана.
            pygame.display.flip()

    def choose_character(self):
        # Выбранный персонаж (изначально не выбран).
        selected_character = None
        # Флаг, указывающий, что кнопка подтверждения нажата.
        confirm_button_pressed = False
        # Цикл выбора персонажа:
        while not confirm_button_pressed:
            # Обработка событий.
            for event in pygame.event.get():
                # Закрытие окна.
                if event.type == pygame.QUIT:
                    pygame.quit()
                    sys.exit()
                # Нажатие мыши.
                if event.type == pygame.MOUSEBUTTONDOWN:
                    # Проверка нажатия на изображение персонажа.
                    for i, char in enumerate(characters):
                        if self.character_images[i] and char.rect and char.rect.collidepoint(event.pos):
                            # Выделяем выбранного персонажа.
                            selected_character = char
                            char.highlighted = True
                            for other_char in characters:
                                if other_char != char:
                                    other_char.highlighted = False
                            break
                # Нажатие на кнопку "Подтвердить".
                if event.type == pygame.MOUSEBUTTONDOWN:
                    button_rect = pygame.Rect(self.width // 2 - 150, self.height // 2 + 150 + 100, 300, 80)
                    if button_rect.collidepoint(event.pos) and selected_character:
                        confirm_button_pressed = True

            # Отрисовка экрана выбора персонажа.
            self.draw_choose_character_screen()
            # Если кнопка подтверждения нажата и персонаж выбран.
            if confirm_button_pressed and selected_character:
                # Открытие поля ввода имени персонажа.
                self.player_name = input_box(self.screen, "Введите имя персонажа:", self.width, self.height, self.stars)
                # Сохраняем выбранного персонажа.
                self.selected_character = selected_character
                # Показ вступительного ролика для персонажа.
                self.show_character_intro(selected_character)
        # Возвращаем выбранного персонажа.
        return selected_character

    # Функция для отрисовки экрана выбора персонажа:
    def draw_choose_character_screen(self):
        # Очищаем экран и рисуем звезды.
        self.screen.fill(BLACK)
        for star in self.stars:
            pygame.draw.circle(self.screen, WHITE, (star[0], star[1]), star[2])

        # Отрисовка изображений персонажей:
        if self.character_images:
            try:
                # Определение индекса и высоты изображения "Русский военный" для выравнивания по высоте.
                russian_soldier_index = characters.index(
                    next(char for char in characters if char.name == "Русский военный"))
                russian_soldier_image = self.character_images[russian_soldier_index]
                russian_soldier_image.get_width()
                russian_soldier_image.get_height()
            except (StopIteration, ValueError, IndexError):
                print("Error: 'Русский военный' not found or images not loaded properly.")
                return

            spacing = 25
            total_width = sum(img.get_width() for img in self.character_images) + (len(characters) - 1) * spacing
            x_offset = max(0, (self.width - total_width) // 2)

            # Цикл отрисовки изображений персонажей:
            for i, char in enumerate(characters):
                if self.character_images[i]:
                    try:
                        # Определение индекса и высоты изображения "Русский военный" для выравнивания по высоте.
                        russian_soldier_index = characters.index(
                            next(c for c in characters if c.name == "Русский военный"))
                        base_height = self.character_images[russian_soldier_index].get_height()
                    except (StopIteration, ValueError, IndexError):
                        print("Error: 'Русский военный' not found or images not loaded properly.")
                        return

                    target_height = base_height
                    aspect_ratio = self.character_images[i].get_width() / self.character_images[i].get_height()
                    new_width = int(target_height * aspect_ratio)

                    # Масштабирование изображений для выравнивания по высоте:
                    scaled_image = pygame.transform.scale(self.character_images[i], (new_width, target_height))
                    scaled_bright_image = pygame.transform.scale(characters[i].bright_image,
                                                                 (new_width, target_height))

                    x_pos = x_offset + sum(img.get_width() for img in self.character_images[:i]) + i * spacing
                    char.rect = pygame.Rect(x_pos, (self.height - target_height) // 2, new_width, target_height)
                    # Отрисовка изображения персонажа (подсвеченное, если выделен):
                    self.screen.blit(scaled_bright_image if char.highlighted else scaled_image, char.rect)

        # Отрисовка кнопки "Подтвердить":
        button_rect = pygame.Rect(self.width // 2 - 150, self.height // 2 + 150 + 100, 300, 80)
        pygame.draw.rect(self.screen, (80, 80, 200), button_rect, border_radius=20)
        font = pygame.font.SysFont(None, 48)
        text = font.render("Подтвердить", True, WHITE)
        text_rect = text.get_rect(center=button_rect.center)
        self.screen.blit(text, text_rect)
        pygame.display.flip()

    # Функция для показа вступительного ролика персонажа:
    def show_character_intro(self, selected_character):
        # Словарь с текстами введения для каждого персонажа.
        intro_texts = {
            "Немецкий медик": [
                "Вы — опытный немецкий военный медик, оказавшийся втянутым в нечто большее, чем мог представить.",
                f"Вас зовут {self.player_name}, и ваш профессионализм и хладнокровие – ваши главные козыри в этом "
                f"безумии.",
                "Вы прибыли на военную базу в России…"
            ],
            "Военный Нигерии": [
                "Вы — опытный солдат из Нигерии, привыкший к жаре и опасностям своей родины.",
                f"Вас зовут {self.player_name}, но даже ваша выучка не приготовила вас к суровой реальности этого места",
                "Российская военная база стала вашей новой реальностью…"
            ],
            "Русский военный": [
                "Вы — опытный русский военный, привыкший к суровым условиям.",
                f"Вас зовут {self.player_name}, но даже вам предстоит столкнуться с угрозой, превосходящей все ваши ожидания.",
                "Вы находитесь на секретной военной базе в России…"
            ],
        }

        # Попытка загрузить фоновое изображение для введения.
        try:
            intro_background = pygame.image.load(os.path.join(data_dir, "intro_background.png")).convert()
            intro_background = pygame.transform.scale(intro_background, (self.width, self.height))
        except pygame.error as e:
            print(f"Error loading intro background: {e}")
            intro_background = None

        # Создаем объект шрифта для отображения текста введения.
        font = pygame.font.SysFont(None, 48)
        DARK_GRAY = (50, 50, 50)  # Цвет текста
        y_offset = 100  # Начальная вертикальная позиция текста
        # Создаем поверхности для текста введения, изменяя цвет.
        text_surfaces = [font.render(line, True, DARK_GRAY) for line in intro_texts.get(selected_character.name, [])]
        y_positions = [y_offset + i * 70 for i in range(len(text_surfaces))]
        clock = pygame.time.Clock()

        # Цикл для отображения текста введения:
        running = True
        while running:
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    pygame.quit()
                    sys.exit()
                # Закрытие введения по нажатию любой клавиши.
                if event.type == pygame.KEYDOWN:
                    running = False

            # Отрисовка фона или черного цвета, если фона нет.
            if intro_background:
                self.screen.blit(intro_background, (0, 0))
            else:
                self.screen.fill(BLACK)

            # Отрисовка текста введения.
            for i, text_surface in enumerate(text_surfaces):
                text_rect = text_surface.get_rect(center=(self.width // 2, y_positions[i]))
                self.screen.blit(text_surface, text_rect)

            # Обновление экрана.
            pygame.display.flip()
            clock.tick(30)  # Ограничение по частоте кадров

        # Очистка экрана после введения и переход к интерфейсу стрельбища.
        self.screen.fill(BLACK)
        self.show_shooting_range()  # Приглашение на стрельбище

    # Функция для отображения полигон стрельбы:
    def show_shooting_range(self):
        """Displays the shooting range game screen with shooting animation."""
        try:
            # Загрузка изображений для стрельбища.
            shooting_range_image = pygame.image.load(os.path.join(data_dir, "poligon.png")).convert()
            shooting_range_image = pygame.transform.scale(shooting_range_image, (self.width, self.height))
            test_image = pygame.image.load(os.path.join(data_dir, "test.png")).convert_alpha()
            test_image = pygame.transform.scale(test_image,
                                                   (test_image.get_width() // 2, test_image.get_height() // 2))
            target_image = pygame.image.load(os.path.join(data_dir, "target.png")).convert_alpha()
            target_image = pygame.transform.scale(target_image,
                                                  (target_image.get_width() // 2, target_image.get_height() // 2))
            patron_image = pygame.image.load(os.path.join(data_dir, "patron.png")).convert_alpha()
            patron_image = pygame.transform.scale(patron_image,
                                                  (patron_image.get_width() // 2, patron_image.get_height() // 2))
            aim_cursor_image = pygame.image.load(os.path.join(data_dir, "aim.png")).convert_alpha()
            aim_cursor_image = pygame.transform.scale(aim_cursor_image, (
                aim_cursor_image.get_width() // 2, aim_cursor_image.get_height() // 2))

            # Загрузка звуковых эффектов.
            self.walk_sound = pygame.mixer.Sound(os.path.join(sounds_dir, "dirt_run.wav"))
            self.walk_sound.set_volume(self.volume)
            self.reload_sound = pygame.mixer.Sound(os.path.join(sounds_dir, "reload.wav"))
            self.reload_sound.set_volume(self.volume)
            self.shot_sound = pygame.mixer.Sound(os.path.join(sounds_dir, "shot.wav"))
            self.shot_sound.set_volume(0.1)

            # Загрузка спрайтов для анимации стрельбы:
            sprite_sheet = None
            try:
                sprite_sheet = pygame.image.load(os.path.join(data_dir, "russian_shoot.png")).convert_alpha()
            except pygame.error as e:
                print(f"Error loading sprite sheet: {e}")

            # Настройка параметров спрайт-листа.
            sprite_width = 64
            sprite_height = 64
            num_frames = 2  # Количество кадров анимации

            # Извлечение кадров из спрайт-листа.
            shoot_animation = []
            if sprite_sheet:
                for i in range(num_frames):
                    frame = sprite_sheet.subsurface(pygame.Rect(i * sprite_width, 0, sprite_width, sprite_height))
                    frame = pygame.transform.scale(frame, (frame.get_width() // 2, frame.get_height() // 2))
                    shoot_animation.append(frame)

            # Настройка курсора.
            self.aim_cursor, self.aim_cursor_rect = create_cursor(aim_cursor_image)
            if self.aim_cursor is None:
                pygame.mouse.set_visible(True)

        except pygame.error as e:
            print(f"Error loading resources: {e}")
            return

        # Переменные игры для управления персонажем и стрельбой.
        test_x = self.test_x
        test_y = self.height - test_image.get_height() - 28
        test_speed = 3
        flipped_image = self.flipped_image
        keys_pressed = {pygame.K_a: False, pygame.K_d: False}
        walk_sound_playing = False
        target_x = self.width - target_image.get_width() - 50
        target_y = self.height - target_image.get_height() - 30
        ammo = 10
        reloading = False
        reload_start_time = 0
        shooting = False
        shot_start_time = 0
        animation_start_time = 0
        animation_duration = 250

        # Основной цикл игры на стрельбище:
        running = True
        while running:
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    pygame.quit()
                    sys.exit()
                elif event.type == pygame.KEYDOWN:
                    if event.key == pygame.K_ESCAPE:
                        running = False
                        self.menu_opened_from_shooting_range = True
                        self.show_menu_screen()
                    elif event.key == pygame.K_d:
                        keys_pressed[pygame.K_d] = True
                    elif event.key == pygame.K_a:
                        keys_pressed[pygame.K_a] = True
                    elif event.key == pygame.K_r and not reloading and ammo < 10:
                        reloading = True
                        reload_start_time = pygame.time.get_ticks()
                        if self.reload_sound:
                            self.reload_sound.play()
                elif event.type == pygame.KEYUP:
                    if event.key == pygame.K_d:
                        keys_pressed[pygame.K_d] = False
                    elif event.key == pygame.K_a:
                        keys_pressed[pygame.K_a] = False
                elif event.type == pygame.MOUSEBUTTONDOWN and event.button == 1 and not reloading and ammo > 0:
                    mouse_x, mouse_y = pygame.mouse.get_pos()
                    if target_image.get_rect(topleft=(target_x, target_y)).collidepoint(mouse_x, mouse_y):
                        ammo -= 1
                        shooting = True
                        shot_start_time = pygame.time.get_ticks()
                        animation_start_time = pygame.time.get_ticks()
                        if self.shot_sound:
                            self.shot_sound.play()

            # Обработка перезарядки.
            if reloading:
                if pygame.time.get_ticks() - reload_start_time >= 2000:  # 2 секунды перезарядки
                    ammo = 10
                    reloading = False

            # Обработка анимации стрельбы.
            if shooting:
                if pygame.time.get_ticks() - shot_start_time >= 500:
                    shooting = False

            # Обработка движений персонажа.
            # Воспроизводим звук шагов, если персонаж движется.
            if keys_pressed[pygame.K_d] or keys_pressed[pygame.K_a]:
                if not walk_sound_playing and self.walk_sound:
                    self.walk_sound.play(-1)
                    walk_sound_playing = True
            else:
                if walk_sound_playing and self.walk_sound:
                    self.walk_sound.stop()
                    walk_sound_playing = False

            if keys_pressed[pygame.K_d]:
                test_x += test_speed
                flipped_image = False
            elif keys_pressed[pygame.K_a]:
                test_x -= test_speed
                flipped_image = True

            # Ограничение перемещения персонажа в пределах экрана.
            test_x = max(0, min(test_x, self.width - test_image.get_width()))

            # Отображение изображения персонажа на экране.
            displayed_image = pygame.transform.flip(test_image, True, False) if flipped_image else test_image

            # Определяем координаты для пули:
            patron_x = test_x + test_image.get_width() // 2 - patron_image.get_width() // 2 - 32
            patron_y = test_y - patron_image.get_height() + 55

            # Очистка экрана перед отрисовкой нового кадра.
            self.screen.fill(BLACK)  # Добавьте соответствующий вызов перед отрисовкой нового кадра

            if shooting_range_image:
                self.screen.blit(shooting_range_image, (0, 0))

            # Отрисовка персонажа.
            self.screen.blit(displayed_image, (test_x, test_y))

            # Если персонаж стреляет, отрисовываем анимацию стрельбы.
            if shooting and shoot_animation:
                elapsed_time = pygame.time.get_ticks() - animation_start_time
                animation_frame = min(len(shoot_animation) - 1, elapsed_time // animation_duration)
                self.screen.blit(shoot_animation[animation_frame], (test_x, test_y))  # Показываем анимацию
                if elapsed_time >= len(shoot_animation) * animation_duration:
                    shooting = False

            # Отрисовка мишени.
            if target_image:
                self.screen.blit(target_image, (target_x, target_y))

            # Отрисовка пули.
            if patron_image:
                self.screen.blit(patron_image, (patron_x, patron_y))
            font = pygame.font.SysFont(None, 36)
            ammo_text = font.render(str(ammo), True, WHITE)
            text_rect = ammo_text.get_rect(center=(patron_x + patron_image.get_width() // 2,
                                                   patron_y + patron_image.get_height() // 2 - 10))
            self.screen.blit(ammo_text, text_rect)

            # Отображение курсора при наведении на мишень.
            if self.aim_cursor and self.aim_cursor_rect and target_image.get_rect(
                    topleft=(target_x, target_y)).collidepoint(pygame.mouse.get_pos()):
                mouse_x, mouse_y = pygame.mouse.get_pos()
                self.screen.blit(self.aim_cursor, (
                    mouse_x - self.aim_cursor_rect.width // 2, mouse_y - self.aim_cursor_rect.height // 2))
            else:
                pygame.mouse.set_visible(True)

            # Обновление экрана.
            pygame.display.flip()

            # Сохранение данных персонажа для повторного использования.
            self.test_x = test_x
            self.flipped_image = flipped_image

    # Функция для создания курсора за пределами изображения:

    # Функция для отображения меню настроек:
    def show_settings_menu(self):
        running = True
        self.dragging_slider = False  # Добавлена переменная для отслеживания перетаскивания

        while running:
            self.screen.fill(BLACK)  # Очистка экрана для меню настроек
            for star in self.stars:
                pygame.draw.circle(self.screen, WHITE, (star[0], star[1]), star[2])
            title_font = pygame.font.SysFont(GAME_FONT, 100)
            title_text = title_font.render("Настройки", True, RED)
            title_rect = title_text.get_rect(center=(self.width // 2, self.height // 4))
            self.screen.blit(title_text, title_rect)

            # Ширина и высота кнопок меню
            button_width = self.width // 5
            button_height = 60
            button_x = self.width // 2 - button_width // 2
            button_y_spacing = 30

            # Определение кнопок в меню
            button_texts = ["Назад", "Применить"]
            self.settings_buttons = []

            # Отрисовка кнопок:
            for i, text in enumerate(button_texts):
                button_y = title_rect.bottom + 50 + i * (button_height + button_y_spacing)
                button_rect = pygame.Rect(button_x, button_y, button_width, button_height)
                pygame.draw.rect(self.screen, GRAY, button_rect)
                button_font = pygame.font.SysFont(GAME_FONT, 30)
                button_text = button_font.render(text, True, WHITE)
                button_text_rect = button_text.get_rect(center=button_rect.center)
                self.screen.blit(button_text, button_text_rect)
                self.settings_buttons.append(button_rect)

            # Ползунок громкости
            slider_width = 300
            slider_height = 40
            slider_x = self.width // 2 - slider_width // 2
            slider_y = title_rect.bottom + 50 + 2 * (button_height + button_y_spacing) + 30

            self.volume_slider_rect = pygame.Rect(slider_x, slider_y, slider_width, slider_height)
            pygame.draw.rect(self.screen, GRAY, self.volume_slider_rect, border_radius=10)

            # Отрисовка "ползунка" на ползунке громкости:
            thumb_x = slider_x + int(self.volume * slider_width) - slider_height // 2
            thumb_rect = pygame.Rect(thumb_x, slider_y, slider_height, slider_height)
            pygame.draw.rect(self.screen, RED, thumb_rect, border_radius=10)

            pygame.display.flip()

            for event in pygame.event.get():
                if event.type == pygame.QUIT:

                    pygame.quit()
                    sys.exit()
                elif event.type == pygame.MOUSEBUTTONDOWN:
                    for i, rect in enumerate(self.settings_buttons):
                        if rect.collidepoint(event.pos):
                            if self.click_sound:
                                self.click_sound.play()
                            if i == 0:  # Кнопка "Назад"
                                running = False
                            elif i == 1:  # Кнопка "Применить"
                                pass  # Здесь может быть обработка применения настроек

                    # Проверка, попадает ли курсор на ползунок громкости.
                    if self.volume_slider_rect.collidepoint(event.pos):
                        self.dragging_slider = True  # Начало перетаскивания
                        self.adjust_volume(event)  # Регулировка громкости

                elif event.type == pygame.MOUSEBUTTONUP:
                    self.dragging_slider = False  # Конец перетаскивания
                elif event.type == pygame.MOUSEMOTION:
                    if self.dragging_slider:
                        self.adjust_volume(event)  # Регулировка громкости при перемещении мыши

            thumb_x = slider_x + int(self.volume * slider_width) - slider_height // 2
            thumb_rect = pygame.Rect(thumb_x, slider_y, slider_height, slider_height)
            pygame.draw.rect(self.screen, RED, thumb_rect, border_radius=10)
            pygame.display.flip()

    # Функция для регулировки громкости на основе положения мыши:
    def adjust_volume(self, event):
        slider_width = self.volume_slider_rect.width
        mouse_x = event.pos[0]
        # Регулируем громкость в диапазоне от 0 до 1.
        self.volume = max(0, min(1, (mouse_x - self.volume_slider_rect.left) / slider_width))
        if self.click_sound:
            self.click_sound.set_volume(self.volume)


# Конец класса MainScreen.

# Создание главного экрана и запуск игры.
infoObject = pygame.display.Info()  # Получаем данные о дисплее (размеры экрана).
mainscreen = MainScreen(infoObject.current_w, infoObject.current_h)  # Создаем объект главного экрана.
mainscreen.run()  # Запускаем основную игру.
pygame.quit()  # Завершение работы Pygame.
sys.exit()  # Завершение программы.
